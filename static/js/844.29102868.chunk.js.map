{"version":3,"file":"static/js/844.29102868.chunk.js","mappings":"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","sources":["components/MovieDetails/ContainerMovie.styled.jsx","components/MovieDetails/ContainerMovie.jsx","components/AdditionalInfo/AdditionalInfo.styled.jsx","components/AdditionalInfo/AdditionalInfo.jsx","pages/MovieDetails.jsx","services/fetch.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n\n  padding: 10px;\n  border: 1px solid black;\n`;\n\nconst Info = styled.div`\n  width: 100%;\n  margin: 0;\n\n  div {\n    margin-top: 20px;\n  }\n`;\n\nconst Title = styled.p`\n  margin-bottom: 20px;\n  font-weight: bold;\n`;\n\nconst PosterImg = styled.img`\n  display: inline-block;\n  background-color: #d1cece;\n`;\n\nexport { Container, Title, PosterImg, Info };\n","import PropTypes from 'prop-types';\nimport { Container, Info, PosterImg, Title } from './ContainerMovie.styled';\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst ContainerMovie = ({ data, genres }) => {\n  return (\n    <>\n      <Container>\n        <div>\n          <PosterImg\n            src={`${IMG_URL}${data.poster_path}`}\n            alt=\"Poster Movie\"\n            width=\"200\"\n            height=\"300\"\n          />\n        </div>\n\n        <Info>\n          <h1>\n            {Object.keys(data).length !== 0 &&\n              `${data.original_title} (${data.release_date.split('-', 1)})`}\n          </h1>\n          <div>User score: {Math.round(data.vote_average * 10)}%</div>\n          <div>\n            <Title>Overview</Title>\n            <span>{data && data.overview}</span>\n          </div>\n          <div>\n            <Title>Genres</Title>\n            {genres}\n          </div>\n        </Info>\n      </Container>\n    </>\n  );\n};\n\nContainerMovie.propTypes = {\n  data: PropTypes.object.isRequired,\n  genres: PropTypes.string.isRequired,\n};\n\nexport default ContainerMovie;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nconst WrapContainer = styled.div`\n  margin-top: 20px;\n  margin-bottom: 30px;\n  border: 1px solid black;\n`;\n\nconst ListAdditions = styled.ul`\n  padding: 10px;\n`;\n\nconst Item = styled.li`\n  list-style: none;\n\n  :not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\n\nconst Title = styled.p`\n  margin: 10px 0 0 10px;\n`;\n\nconst ItemLink = styled(Link)`\n  color: #000000;\n  font-weight: 500;\n  text-decoration: none;\n\n  :hover {\n    color: #bd0000;\n    text-decoration: underline;\n  }\n`;\nexport { WrapContainer, ListAdditions, Item, Title, ItemLink };\n","import {\n  WrapContainer,\n  Title,\n  Item,\n  ItemLink,\n  ListAdditions,\n} from './AdditionalInfo.styled';\n\nconst AdditionalInfo = () => {\n  return (\n    <WrapContainer>\n      <Title>Additional information</Title>\n      <ListAdditions>\n        <Item>\n          <ItemLink to=\"cast\">Cast</ItemLink>\n        </Item>\n        <Item>\n          <ItemLink to=\"reviews\">Reviews</ItemLink>\n        </Item>\n      </ListAdditions>\n    </WrapContainer>\n  );\n};\n\nexport default AdditionalInfo;\n","import { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport fetchMovies from 'services/fetch';\n\nimport ContainerMovie from '../components/MovieDetails/ContainerMovie';\nimport AdditionalInfo from 'components/AdditionalInfo/AdditionalInfo';\n\nconst MovieDetails = () => {\n  const [data, setData] = useState({});\n  const [genres, setGenres] = useState('');\n  const { id } = useParams();\n\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  const URL = `https://api.themoviedb.org/3/movie/${id}`;\n\n  useEffect(() => {\n    // const controller = new AbortController();\n\n    async function fetchData() {\n      const currentMovie = await fetchMovies(\n        URL\n        // {\n        // signal: controller.signal,\n        // }\n      );\n\n      if (currentMovie === undefined) {\n        return;\n      }\n      setData(currentMovie);\n      setGenres(() => {\n        if (!currentMovie?.genres) {\n          return '';\n        }\n        const genresStr = currentMovie.genres.reduce((acum, genre) => {\n          return currentMovie.genres.indexOf(genre) ===\n            currentMovie.genres.length - 1\n            ? (acum = `${acum} ${genre.name}`)\n            : (acum = `${acum} ${genre.name},`);\n        }, '');\n        return genresStr;\n      });\n      // console.log(currentMovie);\n      return currentMovie;\n    }\n\n    fetchData();\n\n    return () => {\n      // controller.abort();\n    };\n  }, [URL]);\n\n  return (\n    <div>\n      {Object.keys(data).length > 0 && (\n        <>\n          <Link to={backLinkHref.current}>Go back</Link>\n          <ContainerMovie data={data} genres={genres} />\n          <AdditionalInfo />\n          <Suspense fallback={<div>Loading...</div>}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n      {Object.keys(data).length === 0 && (\n        <p>No data, maybe something went wrong...</p>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst API_KEY = 'api_key=7b264c573728240a6ab06336c75c925f';\n\nconst fetchMovies = async (url, properties = '', controller = {}) => {\n  try {\n    const dataMovies = await axios.get(\n      `${url}?${API_KEY}${properties}`,\n      controller\n    );\n    return dataMovies.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nfetchMovies.propTypes = {\n  url: PropTypes.string.isRequired,\n  properties: PropTypes.string,\n  controller: PropTypes.object,\n};\n\nexport default fetchMovies;\n"],"names":["Container","styled","Info","Title","PosterImg","data","genres","src","poster_path","alt","width","height","Object","keys","length","original_title","release_date","split","Math","round","vote_average","overview","WrapContainer","ListAdditions","Item","ItemLink","Link","to","useState","setData","setGenres","id","useParams","location","useLocation","backLinkHref","useRef","state","from","URL","useEffect","fetchMovies","undefined","currentMovie","reduce","acum","genre","indexOf","name","fetchData","current","Suspense","fallback","API_KEY","url","properties","controller","axios","dataMovies","console","error","propTypes","PropTypes"],"sourceRoot":""}